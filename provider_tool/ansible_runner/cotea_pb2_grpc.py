# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import provider_tool.ansible_runner.cotea_pb2 as cotea__pb2


class CoteaGatewayStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartSession = channel.unary_unary(
                '/CoteaGateway/StartSession',
                request_serializer=cotea__pb2.EmptyMsg.SerializeToString,
                response_deserializer=cotea__pb2.StartSessionMSG.FromString,
                )
        self.InitExecution = channel.unary_unary(
                '/CoteaGateway/InitExecution',
                request_serializer=cotea__pb2.Config.SerializeToString,
                response_deserializer=cotea__pb2.Status.FromString,
                )
        self.RunTask = channel.unary_unary(
                '/CoteaGateway/RunTask',
                request_serializer=cotea__pb2.Task.SerializeToString,
                response_deserializer=cotea__pb2.TaskResults.FromString,
                )
        self.StopExecution = channel.unary_unary(
                '/CoteaGateway/StopExecution',
                request_serializer=cotea__pb2.SessionID.SerializeToString,
                response_deserializer=cotea__pb2.Status.FromString,
                )


class CoteaGatewayServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoteaGatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSession,
                    request_deserializer=cotea__pb2.EmptyMsg.FromString,
                    response_serializer=cotea__pb2.StartSessionMSG.SerializeToString,
            ),
            'InitExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.InitExecution,
                    request_deserializer=cotea__pb2.Config.FromString,
                    response_serializer=cotea__pb2.Status.SerializeToString,
            ),
            'RunTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RunTask,
                    request_deserializer=cotea__pb2.Task.FromString,
                    response_serializer=cotea__pb2.TaskResults.SerializeToString,
            ),
            'StopExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StopExecution,
                    request_deserializer=cotea__pb2.SessionID.FromString,
                    response_serializer=cotea__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CoteaGateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoteaGateway(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoteaGateway/StartSession',
            cotea__pb2.EmptyMsg.SerializeToString,
            cotea__pb2.StartSessionMSG.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoteaGateway/InitExecution',
            cotea__pb2.Config.SerializeToString,
            cotea__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoteaGateway/RunTask',
            cotea__pb2.Task.SerializeToString,
            cotea__pb2.TaskResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoteaGateway/StopExecution',
            cotea__pb2.SessionID.SerializeToString,
            cotea__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CoteaWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitExecution = channel.unary_unary(
                '/CoteaWorker/InitExecution',
                request_serializer=cotea__pb2.WorkerConfig.SerializeToString,
                response_deserializer=cotea__pb2.Status.FromString,
                )
        self.RunTask = channel.unary_unary(
                '/CoteaWorker/RunTask',
                request_serializer=cotea__pb2.WorkerTask.SerializeToString,
                response_deserializer=cotea__pb2.TaskResults.FromString,
                )
        self.StopExecution = channel.unary_unary(
                '/CoteaWorker/StopExecution',
                request_serializer=cotea__pb2.EmptyMsg.SerializeToString,
                response_deserializer=cotea__pb2.Status.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/CoteaWorker/HealthCheck',
                request_serializer=cotea__pb2.EmptyMsg.SerializeToString,
                response_deserializer=cotea__pb2.WorkerHealthStatus.FromString,
                )


class CoteaWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoteaWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.InitExecution,
                    request_deserializer=cotea__pb2.WorkerConfig.FromString,
                    response_serializer=cotea__pb2.Status.SerializeToString,
            ),
            'RunTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RunTask,
                    request_deserializer=cotea__pb2.WorkerTask.FromString,
                    response_serializer=cotea__pb2.TaskResults.SerializeToString,
            ),
            'StopExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StopExecution,
                    request_deserializer=cotea__pb2.EmptyMsg.FromString,
                    response_serializer=cotea__pb2.Status.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=cotea__pb2.EmptyMsg.FromString,
                    response_serializer=cotea__pb2.WorkerHealthStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CoteaWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoteaWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoteaWorker/InitExecution',
            cotea__pb2.WorkerConfig.SerializeToString,
            cotea__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoteaWorker/RunTask',
            cotea__pb2.WorkerTask.SerializeToString,
            cotea__pb2.TaskResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoteaWorker/StopExecution',
            cotea__pb2.EmptyMsg.SerializeToString,
            cotea__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CoteaWorker/HealthCheck',
            cotea__pb2.EmptyMsg.SerializeToString,
            cotea__pb2.WorkerHealthStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
