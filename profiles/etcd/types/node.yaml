tosca_definitions_version: tosca_simple_yaml_1_3


capability_types:

  kubetos.capabilities.Etcd.Endpoint.Peer:
    derived_from: tosca.capabilities.Endpoint
    properties:
      port:
        type: integer
        default: 2380
        required: false

  kubetos.capabilities.Etcd.Endpoint.Access:
    derived_from: tosca.capabilities.Endpoint
    properties:
      port:
        type: integer
        default: 2379
        required: false
      api_version:
        type: string
        default: v2
        constraints:
          - valid_values: [ v1, v2 ]

relationship_types:

  kubetos.relationships.EtcdPeer:
    derived_from: tosca.relationships.ConnectsTo
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
        operations:
          pre_configure_target:
            inputs:
              list: { value: { get_attribute: [ TARGET, peers ] }, type: list }
              new_item:
                value:
                  name: { get_attribute: [ SOURCE, name ] }
                  access_address: { get_attribute: [ SOURCE, host, private_address ] }
                  access_port: { get_property: [ SOURCE, access_address, port ] }
                  peer_address: { get_attribute: [ SOURCE, host, private_address ] }
                  peer_port: { get_property: [ SOURCE, peer_address, port ] }
                type: map
            outputs:
              new_list: [ TARGET, peers ]
            implementation: ../../../add-to-list.yaml

node_types:

  kubetos.nodes.Etcd.Cluster:
    derived_from: tosca.nodes.Root
    attributes:
      peers:
        type: list
        default: []

  kubetos.nodes.Etcd:
    derived_from: tosca.nodes.SoftwareComponent
    capabilities:
      access_address:
        type: kubetos.capabilities.Etcd.Endpoint.Access
      peer_address:
        type: kubetos.capabilities.Etcd.Endpoint.Peer
    attributes:
      name:
        type: string
        default: { get_attribute: [ SELF, tosca_id ] }
    properties:
      version:
        type: string
        default: v3.4.13
        required: false
      backup_retention_count:
        type: integer
        default: -1
        required: false
      heartbeat_interval:
        type: scalar-unit.time
        default: 250 ms
        required: false
      election_timeout:
        type: scalar-unit.time
        default: 5000 ms
        required: false
      snapshot_count:
        type: integer
        default: 10000
        required: false
      quota_backend_bytes:
        type: scalar-unit.size
        default: 2147483648 B
        required: false
      max_snapshots:
        type: integer
        default: 0
        required: false
      max_wals:
        type: integer
        default: 0
        required: false
    requirements:
      - cluster:
          capability: tosca.capabilities.Node
          node: kubetos.nodes.Etcd.Cluster
          relationship: kubetos.relationships.EtcdPeer
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              etcd_version: { value: { get_property: [ SELF, version ] }, type: string }
            implementation:
              primary: ../ansible/etcd--create.yaml
              dependencies:
                - ../../../roles
          configure:
            inputs:
              etcd_version: { value: { get_property: [ SELF, version ] }, type: string }
              etcd_address: { value: { get_attribute: [ SELF, host, private_address ] }, type: string }
              etcd_peer_port: { value: { get_property: [ SELF, peer_address, port ] }, type: integer }
              etcd_access_address: { value: { get_attribute: [ SELF, host, private_address ] }, type: string }
              etcd_access_port: { value: { get_property: [ SELF, access_address, port ] }, type: integer }
              etcd_member_name: { value: { get_attribute: [ SELF, name ] }, type: string }
              etcd_peers: { value: { get_attribute: [ SELF, cluster, peers ] }, type: list }
            implementation:
              primary: ../ansible/etcd--configure.yaml
              dependencies:
                - ../../../roles
          start:
            inputs:
              etcd_version: { value: { get_property: [ SELF, version ] }, type: string }
            implementation:
              primary: ../ansible/etcd--start.yaml
              dependencies:
                - ../../../roles
